@page "/"
@using Buisness
@inject Buisness.Repository.IRepository.IRiskAssesmentPDFRepository PDFService
@using BlazorInputFile
@using DataAccess.Data
@inject IJSRuntime jsRuntime
@using System.IO
@inject NavigationManager NavigationManager
@using System.Web

<div style="float:left; margin-right:5px;">
    <label>Number</label>
    <input type="number" @bind="@riskPdf.Number" />
    <label>Date</label>
    <input type="date" @bind="@riskPdf.Date" />
    <label>Value</label>
    <input type="number" @bind="@riskPdf.Value" />
</div>

<button class="btn btn-success" style="float:left; margin-right:5px;" @onclick="SaveRiskAssesment">Save</button>
@*<button class="btn btn-success" style="float:left; margin-right:5px;" @onclick="AddNew">Add New</button>*@
<br />
<br />

<table class="table table-striped table-bordered">
    <thead>
        <tr>
            <th>Number</th>
            <th>Date</th>
            <th>Value</th>
            <th>PDF Name</th>
            <th>Upload</th>
            <th>Action</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var risk in Risks)
        {
            <tr>
                <td>@risk.Number</td>
                <td>@risk.Date.ToString("dd-MM-yyyy")</td>
                <td>@risk.Value</td>
                <td>@risk.PDFName</td>
                <td>
                    <BlazorInputFile.InputFile accept=".pdf" OnChange="@(e=> HandleFileSelected(e,@risk.Id))" />
                    @*<button onclick="document.getElementById('picker').click()">Choose Text File</button>
                        <BlazorInputFile.InputFile id="picker" OnChange="@(e=> HandleFileSelected(e,@risk.Id))" accept=".pdf" hidden></BlazorInputFile.InputFile>*@
                </td>
                <td>
                    @if (risk.PDF != null)
                    {
                        <button class="btn btn-primary" @onclick="@(e=> DeletePDF(@risk.Id))">Delete PDF</button>
                        <button class="btn btn-primary" @onclick="@(e=> SelectPDF(@risk))">View PDF</button>
                        // <button id="showPDF" value="System.Convert.ToBase64String(@risk.PDF)"@onclick= "@(e=> SelectAPIPDF(@risk))" class="btn btn-primary">View PDF(ADOBE API)</button>
                    }
                    <button class="btn btn-primary" @onclick="@(e=> DeleteItem(@risk.Id))">Delete Item</button>
                </td>
            </tr>
        }
    </tbody>


</table>

@*@if (!string.IsNullOrEmpty(pdfContent))
{*@
    @*<embed src="@pdfContent" width="1300px" height="2100px" />*@
    <iframe id="myFrame" width="1300px" height="900px" />
    @*<object data="@placeholder" width="1300px." height="2100px" type="application/pdf"></object>*@
@*}*@


@*<div id="adobe-dc-view" style="height: 360px; width: 500px;"></div>*@




@code {
    RiskAssesmentPDF riskPdf = new RiskAssesmentPDF();
    List<RiskAssesmentPDF> Risks = new List<RiskAssesmentPDF>();
    string pdfName = "";
    string pdfContent = "";
    string pdfContentAPI = "";
    MemoryStream stream;
    System.Threading.Tasks.ValueTask placeholder;

    protected override async Task OnInitializedAsync()
    {
        getAllRiskAssesmentPDFS();
    }

    private void getAllRiskAssesmentPDFS()
    {
        Risks = PDFService.GetRiskAssesmentPDFs();
    }

    private void AddNew()
    {
        riskPdf = new RiskAssesmentPDF();
    }

    private void SaveRiskAssesment()
    {
        PDFService.Save(riskPdf);
        riskPdf = new RiskAssesmentPDF();
        getAllRiskAssesmentPDFS();
    }

    async void HandleFileSelected(IFileListEntry[] files, int riskAssesmentID)
    {
        var attach = await FileSender(files.FirstOrDefault());
        pdfName = files.FirstOrDefault().Name.ToString();
        PDFService.uploadRiskAssesmentPDF(riskAssesmentID, attach, pdfName);
        getAllRiskAssesmentPDFS();
    }

    public async Task<byte[]> FileSender(IFileListEntry file)
    {
        using (var ms = new System.IO.MemoryStream())
        {
            await file.Data.CopyToAsync(ms);
            return ms.ToArray();
        }

    }

    private void DeletePDF(int PDFID)
    {
        PDFService.DeletePDF(PDFID);
        getAllRiskAssesmentPDFS();
    }

    private async Task DeleteItem(int PDFID)
    {
        await PDFService.DeleteObject(PDFID);
        getAllRiskAssesmentPDFS();
    }


    //private void DownloadPDF(int riskID)
    //{
    //    var pdf = Risks.FirstOrDefault(x => x.Id == riskID);
    //    jsRuntime.InvokeVoidAsync("saveAsFile", pdf.PDFName, pdf.PDF);
    //    getAllRiskAssesmentPDFS();
    //}

    private void SelectPDF(RiskAssesmentPDF risk)
    {
        var data = risk.PDF;
        // pdfContent = "data:application/pdf;base64,";
        pdfContent = System.Convert.ToBase64String(data);
        StateHasChanged();
        jsRuntime.InvokeVoidAsync("base64ToArrayBuffer", pdfContent);


    }

    private void SelectAPIPDF(RiskAssesmentPDF risk)
    {
        var data = risk.PDF;
        pdfContentAPI = "data:application/pdf;base64,";
        pdfContentAPI += System.Convert.ToBase64String(data);
        jsRuntime.InvokeVoidAsync("ShowPDF", risk.PDFName, pdfContent);
        StateHasChanged();
    }


}